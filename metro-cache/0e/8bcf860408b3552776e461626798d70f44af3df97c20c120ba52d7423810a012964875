{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"react-native-google-fit","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"react-native-universal-pedometer","data":{"isAsync":false}},{"name":"moment","data":{"isAsync":false}},{"name":"../../store/createStore","data":{"isAsync":false}},{"name":"../actions/activityActions","data":{"isAsync":false}},{"name":"./DateUtil","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  var _reactNativeGoogleFit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"react-native-google-fit\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[5], \"react-native\");\n\n  var _reactNativeUniversalPedometer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native-universal-pedometer\"));\n\n  var _moment = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"moment\"));\n\n  var _createStore = _$$_REQUIRE(_dependencyMap[8], \"../../store/createStore\");\n\n  var _activityActions = _$$_REQUIRE(_dependencyMap[9], \"../actions/activityActions\");\n\n  var _DateUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"./DateUtil\"));\n\n  var GoogleFitDateObj = {\n    startDate: null,\n    endDate: null\n  };\n\n  var GoogleFit = function () {\n    function GoogleFit() {\n      (0, _classCallCheck2.default)(this, GoogleFit);\n    }\n\n    (0, _createClass2.default)(GoogleFit, null, [{\n      key: \"authenticate\",\n      value: function authenticate() {\n        _reactNativeGoogleFit.default.authorize();\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return new Promise(function (resolve, reject) {\n          _reactNativeGoogleFit.default.isEnabled(function (isErr, result) {\n            if (isErr) return reject();\n\n            if (result === false) {\n              return resolve(false);\n            } else return resolve(true);\n          });\n        });\n      }\n    }, {\n      key: \"onAuthorization\",\n      value: function onAuthorization(callback) {\n        _reactNativeGoogleFit.default.onAuthorize(callback);\n      }\n    }, {\n      key: \"onAuthorizationFail\",\n      value: function onAuthorizationFail(callback) {\n        _reactNativeGoogleFit.default.onAuthorizeFailure(callback);\n      }\n    }, {\n      key: \"getStepsFromDate\",\n      value: function getStepsFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyStepCountSamples(options, function (err, result) {\n            if (err) return rej(new Error('Cannot fetch data from Google Fit - Steps'));\n            return res(result[0].steps);\n          });\n        });\n      }\n    }, {\n      key: \"getCaloriesFromDate\",\n      value: function getCaloriesFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyCalorieSamples(options, function (isErr, result) {\n            if (isErr) {\n              return rej(new Error('Cannot fetch data from Google Fit - Calories'));\n            }\n\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"getDistanceFromDate\",\n      value: function getDistanceFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyDistanceSamples(options, function (isErr, result) {\n            if (isErr == 'There is no any distance data for this period') return res([]);\n            if (isErr) return rej(new Error('Cannot fetch dada from Google Fit - Distance'));\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"startPedometerListener\",\n      value: function startPedometerListener(callback) {\n        _reactNativeUniversalPedometer.default.startPedometerUpdatesFromDate(Date.now(), callback);\n      }\n    }, {\n      key: \"stopPedometerListener\",\n      value: function stopPedometerListener() {\n        _reactNativeUniversalPedometer.default.stopPedometerUpdates();\n      }\n    }, {\n      key: \"fetchDataSingle\",\n      value: function fetchDataSingle(startDate) {\n        var sinceMidnight,\n            endDate,\n            options,\n            data,\n            _args = arguments;\n        return _regenerator.default.async(function fetchDataSingle$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                sinceMidnight = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                endDate = _args.length > 2 ? _args[2] : undefined;\n\n                if (sinceMidnight) {\n                  startDate.startOf('day');\n                }\n\n                options = {\n                  startDate: startDate.toISOString(),\n                  endDate: endDate ? endDate.toISOString() : (0, _moment.default)().toISOString()\n                };\n                _context.prev = 4;\n                _context.next = 7;\n                return _regenerator.default.awrap(Promise.all([GoogleFit.getStepsFromDate(options), GoogleFit.getDistanceFromDate(options), GoogleFit.getCaloriesFromDate(options)]));\n\n              case 7:\n                data = _context.sent;\n                ;\n                return _context.abrupt(\"return\", {\n                  steps: data[0].length > 0 ? data[0][0].value : 0,\n                  distance: data[1].length > 0 ? data[1][0].distance : 0,\n                  calories: data[2].length > 0 ? data[2][0].calorie : 0\n                });\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](4);\n                console.log(_context.t0);\n                throw new Error('Cannot fetch data from Google Fit');\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[4, 12]]);\n      }\n    }, {\n      key: \"sync\",\n      value: function sync() {\n        var state, createdAt, startDate, _ref, steps, distance, calories;\n\n        return _regenerator.default.async(function sync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = _createStore.store.getState();\n                createdAt = _DateUtil.default.unixToMoment(state.user.createdAt);\n                startDate = createdAt.isSame((0, _moment.default)(), 'date') ? createdAt : (0, _moment.default)().startOf('day');\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _regenerator.default.awrap(GoogleFit.fetchDataSingle(startDate, false));\n\n              case 6:\n                _ref = _context2.sent;\n                steps = _ref.steps;\n                distance = _ref.distance;\n                calories = _ref.calories;\n\n                _createStore.store.dispatch((0, _activityActions.setData)(steps, distance, calories));\n\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                _reactNative.Alert.alert('Грешка', 'Синхронизирането на данните с Google Fit беше неуспешно');\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[3, 13]]);\n      }\n    }]);\n    return GoogleFit;\n  }();\n\n  var _default = GoogleFit;\n  exports.default = _default;\n});","map":[[15,0,1,0],[17,0,2,0],[19,0,3,0],[21,0,4,0],[23,0,5,0],[25,0,6,0],[27,0,7,0],[29,0,9,0],[29,6,9,6,"GoogleFitDateObj"],[29,22,9,22],[29,25,9,25],[30,0,10,4,"startDate"],[30,4,10,4,"startDate"],[30,13,10,13],[30,15,10,15],[30,19,9,25],[31,0,11,4,"endDate"],[31,4,11,4,"endDate"],[31,11,11,11],[31,13,11,13],[32,0,9,25],[32,3,9,0],[34,6,14,6,"GoogleFit"],[34,15],[41,37,15,26],[42,0,16,8,"GFit"],[42,38,16,13,"authorize"],[42,47,16,8],[43,0,17,5],[46,40,19,29],[47,0,20,8],[47,15,20,15],[47,19,20,19,"Promise"],[47,26,20,15],[47,27,20,27],[47,37,20,28,"resolve"],[47,44,20,27],[47,46,20,37,"reject"],[47,52,20,27],[47,54,20,48],[48,0,21,12,"GFit"],[48,40,21,17,"isEnabled"],[48,49,21,12],[48,50,21,27],[48,60,21,36,"isErr"],[48,65,21,27],[48,67,21,43,"result"],[48,73,21,27],[48,75,21,51],[49,0,22,16],[49,16,22,19,"isErr"],[49,21,22,16],[49,23,22,26],[49,30,22,33,"reject"],[49,36,22,39],[49,38,22,26],[51,0,23,16],[51,16,23,19,"result"],[51,22,23,25],[51,27,23,30],[51,32,23,16],[51,34,23,37],[52,0,24,20],[52,21,24,27,"resolve"],[52,28,24,34],[52,29,24,35],[52,34,24,34],[52,35,24,20],[53,0,25,17],[53,13,23,16],[53,19,25,23],[53,26,25,30,"resolve"],[53,33,25,37],[53,34,25,38],[53,38,25,37],[53,39,25,23],[54,0,26,13],[54,11,21,12],[55,0,27,9],[55,9,20,15],[55,10,20,8],[56,0,28,5],[59,38,34,27,"callback"],[59,46],[59,48,34,37],[60,0,35,8,"GFit"],[60,38,35,13,"onAuthorize"],[60,49,35,8],[60,50,35,25,"callback"],[60,58,35,8],[61,0,36,5],[64,42,38,31,"callback"],[64,50],[64,52,38,41],[65,0,39,8,"GFit"],[65,38,39,13,"onAuthorizeFailure"],[65,56,39,8],[65,57,39,32,"callback"],[65,65,39,8],[66,0,40,5],[69,39,47,28,"options"],[69,46],[69,48,47,37],[70,0,48,8],[70,15,48,15],[70,19,48,19,"Promise"],[70,26,48,15],[70,27,48,27],[70,37,48,28,"res"],[70,40,48,27],[70,42,48,33,"rej"],[70,45,48,27],[70,47,48,41],[71,0,49,12,"GFit"],[71,40,49,17,"getDailyStepCountSamples"],[71,64,49,12],[71,65,49,42,"options"],[71,72,49,12],[71,74,49,51],[71,84,49,60,"err"],[71,87,49,51],[71,89,49,65,"result"],[71,95,49,51],[71,97,49,73],[72,0,50,16],[72,16,50,19,"err"],[72,19,50,16],[72,21,50,24],[72,28,50,31,"rej"],[72,31,50,34],[72,32,50,35],[72,36,50,39,"Error"],[72,41,50,35],[72,42,50,45],[72,85,50,35],[72,86,50,34],[72,87,50,24],[73,0,51,16],[73,19,51,23,"res"],[73,22,51,26],[73,23,51,27,"result"],[73,29,51,33],[73,30,51,34],[73,31,51,33],[73,32,51,27],[73,33,51,37,"steps"],[73,38,51,26],[73,39,51,16],[74,0,52,13],[74,11,49,12],[75,0,53,9],[75,9,48,15],[75,10,48,8],[76,0,54,5],[79,42,62,31,"options"],[79,49],[79,51,62,40],[80,0,63,8],[80,15,63,15],[80,19,63,19,"Promise"],[80,26,63,15],[80,27,63,27],[80,37,63,28,"res"],[80,40,63,27],[80,42,63,33,"rej"],[80,45,63,27],[80,47,63,41],[81,0,64,12,"GFit"],[81,40,64,17,"getDailyCalorieSamples"],[81,62,64,12],[81,63,64,40,"options"],[81,70,64,12],[81,72,64,49],[81,82,64,58,"isErr"],[81,87,64,49],[81,89,64,65,"result"],[81,95,64,49],[81,97,64,73],[82,0,65,16],[82,16,65,19,"isErr"],[82,21,65,16],[82,23,65,26],[83,0,66,20],[83,21,66,27,"rej"],[83,24,66,30],[83,25,66,31],[83,29,66,35,"Error"],[83,34,66,31],[83,35,66,41],[83,81,66,31],[83,82,66,30],[83,83,66,20],[84,0,67,17],[86,0,68,16],[86,19,68,23,"res"],[86,22,68,26],[86,23,68,27,"result"],[86,29,68,26],[86,30,68,16],[87,0,69,13],[87,11,64,12],[88,0,70,9],[88,9,63,15],[88,10,63,8],[89,0,71,5],[92,42,79,31,"options"],[92,49],[92,51,79,40],[93,0,80,8],[93,15,80,15],[93,19,80,19,"Promise"],[93,26,80,15],[93,27,80,27],[93,37,80,28,"res"],[93,40,80,27],[93,42,80,33,"rej"],[93,45,80,27],[93,47,80,41],[94,0,81,12,"GFit"],[94,40,81,17,"getDailyDistanceSamples"],[94,63,81,12],[94,64,81,41,"options"],[94,71,81,12],[94,73,81,50],[94,83,81,59,"isErr"],[94,88,81,50],[94,90,81,66,"result"],[94,96,81,50],[94,98,81,74],[95,0,82,16],[95,16,82,19,"isErr"],[95,21,82,24],[95,25,82,28],[95,72,82,16],[95,74,82,77],[95,81,82,84,"res"],[95,84,82,87],[95,85,82,88],[95,87,82,87],[95,88,82,77],[96,0,83,16],[96,16,83,19,"isErr"],[96,21,83,16],[96,23,83,26],[96,30,83,33,"rej"],[96,33,83,36],[96,34,83,37],[96,38,83,41,"Error"],[96,43,83,37],[96,44,83,47],[96,90,83,37],[96,91,83,36],[96,92,83,26],[97,0,84,16],[97,19,84,23,"res"],[97,22,84,26],[97,23,84,27,"result"],[97,29,84,26],[97,30,84,16],[98,0,85,13],[98,11,81,12],[99,0,86,9],[99,9,80,15],[99,10,80,8],[100,0,87,5],[103,45,93,34,"callback"],[103,53],[103,55,93,44],[104,0,94,8,"Pedometer"],[104,47,94,18,"startPedometerUpdatesFromDate"],[104,76,94,8],[104,77,94,48,"Date"],[104,81,94,52],[104,82,94,53,"now"],[104,85,94,48],[104,87,94,8],[104,89,94,60,"callback"],[104,97,94,8],[105,0,95,5],[108,46,97,35],[109,0,98,8,"Pedometer"],[109,47,98,18,"stopPedometerUpdates"],[109,67,98,8],[110,0,99,5],[113,38,108,33,"startDate"],[113,47],[123,0,108,44,"sinceMidnight"],[123,16,108,44,"sinceMidnight"],[123,29],[123,88,108,60],[123,93],[124,0,108,67,"endDate"],[124,16,108,67,"endDate"],[124,23],[126,0,109,8],[126,20,109,11,"sinceMidnight"],[126,33,109,8],[126,35,109,26],[127,0,110,12,"startDate"],[127,18,110,12,"startDate"],[127,27,110,21],[127,28,110,22,"startOf"],[127,35,110,12],[127,36,110,30],[127,41,110,12],[128,0,111,9],[130,0,112,14,"options"],[130,16,112,14,"options"],[130,23],[130,26,112,24],[131,0,113,12,"startDate"],[131,18,113,12,"startDate"],[131,27,113,21],[131,29,113,23,"startDate"],[131,38,113,32],[131,39,113,33,"toISOString"],[131,50,113,23],[131,52,112,24],[132,0,114,12,"endDate"],[132,18,114,12,"endDate"],[132,25,114,19],[132,27,114,21,"endDate"],[132,34,114,28],[132,37,114,31,"endDate"],[132,44,114,38],[132,45,114,39,"toISOString"],[132,56,114,31],[132,58,114,28],[132,61,114,55],[132,84,114,64,"toISOString"],[132,95,114,55],[133,0,112,24],[133,17],[136,50,118,31,"Promise"],[136,57,118,38],[136,58,118,39,"all"],[136,61,118,31],[136,62,118,43],[136,63,119,16,"GoogleFit"],[136,72,119,25],[136,73,119,26,"getStepsFromDate"],[136,89,119,16],[136,90,119,43,"options"],[136,97,119,16],[136,98,118,43],[136,100,120,16,"GoogleFit"],[136,109,120,25],[136,110,120,26,"getDistanceFromDate"],[136,129,120,16],[136,130,120,46,"options"],[136,137,120,16],[136,138,118,43],[136,140,121,16,"GoogleFit"],[136,149,121,25],[136,150,121,26,"getCaloriesFromDate"],[136,169,121,16],[136,170,121,46,"options"],[136,177,121,16],[136,178,118,43],[136,179,118,31],[136,180],[139,0,118,18,"data"],[139,16,118,18,"data"],[139,20],[140,0,122,15],[141,49,124,19],[142,0,125,16,"steps"],[142,18,125,16,"steps"],[142,23,125,21],[142,25,125,23,"data"],[142,29,125,27],[142,30,125,28],[142,31,125,27],[142,32,125,23],[142,33,125,31,"length"],[142,39,125,23],[142,42,125,40],[142,43,125,23],[142,46,125,44,"data"],[142,50,125,48],[142,51,125,49],[142,52,125,48],[142,53,125,44],[142,54,125,52],[142,55,125,44],[142,57,125,55,"value"],[142,62,125,23],[142,65,125,63],[142,66,124,19],[143,0,126,16,"distance"],[143,18,126,16,"distance"],[143,26,126,24],[143,28,126,26,"data"],[143,32,126,30],[143,33,126,31],[143,34,126,30],[143,35,126,26],[143,36,126,34,"length"],[143,42,126,26],[143,45,126,43],[143,46,126,26],[143,49,126,47,"data"],[143,53,126,51],[143,54,126,52],[143,55,126,51],[143,56,126,47],[143,57,126,55],[143,58,126,47],[143,60,126,58,"distance"],[143,68,126,26],[143,71,126,69],[143,72,124,19],[144,0,127,16,"calories"],[144,18,127,16,"calories"],[144,26,127,24],[144,28,127,26,"data"],[144,32,127,30],[144,33,127,31],[144,34,127,30],[144,35,127,26],[144,36,127,34,"length"],[144,42,127,26],[144,45,127,43],[144,46,127,26],[144,49,127,47,"data"],[144,53,127,51],[144,54,127,52],[144,55,127,51],[144,56,127,47],[144,57,127,55],[144,58,127,47],[144,60,127,58,"calorie"],[144,67,127,26],[144,70,127,68],[145,0,124,19],[145,17],[150,0,130,12,"console"],[150,16,130,12,"console"],[150,23,130,19],[150,24,130,20,"log"],[150,27,130,12],[151,22,131,18],[151,26,131,22,"Error"],[151,31,131,18],[151,32,131,28],[151,67,131,18],[151,68],[169,0,136,14,"state"],[169,16,136,14,"state"],[169,21],[169,24,136,22,"store"],[169,43,136,28,"getState"],[169,51,136,22],[169,53],[170,0,137,14,"createdAt"],[170,16,137,14,"createdAt"],[170,25],[170,28,137,26,"DateUtil"],[170,46,137,35,"unixToMoment"],[170,58,137,26],[170,59,137,48,"state"],[170,64,137,53],[170,65,137,54,"user"],[170,69,137,48],[170,70,137,59,"createdAt"],[170,79,137,26],[170,80],[171,0,139,14,"startDate"],[171,16,139,14,"startDate"],[171,25],[171,28,139,26,"createdAt"],[171,37,139,35],[171,38,139,36,"isSame"],[171,44,139,26],[171,45,139,43],[171,67,139,26],[171,69,139,53],[171,75,139,26],[171,79,139,63,"createdAt"],[171,88,139,26],[171,91,139,75],[171,114,139,84,"startOf"],[171,121,139,75],[171,122,139,92],[171,127,139,75],[171,128],[174,50,142,56,"GoogleFit"],[174,59,142,65],[174,60,142,66,"fetchDataSingle"],[174,75,142,56],[174,76,142,82,"startDate"],[174,85,142,56],[174,87,142,93],[174,92,142,56],[174,93],[178,0,142,20,"steps"],[178,16,142,20,"steps"],[178,21],[178,29,142,20,"steps"],[178,34],[179,0,142,27,"distance"],[179,16,142,27,"distance"],[179,24],[179,32,142,27,"distance"],[179,40],[180,0,142,37,"calories"],[180,16,142,37,"calories"],[180,24],[180,32,142,37,"calories"],[180,40],[182,0,144,12,"store"],[182,35,144,18,"dispatch"],[182,43,144,12],[182,44,144,27],[182,74,144,35,"steps"],[182,79,144,27],[182,81,144,42,"distance"],[182,89,144,27],[182,91,144,52,"calories"],[182,99,144,27],[182,100,144,12],[191,0,147,12,"Alert"],[191,35,147,18,"alert"],[191,40,147,12],[191,41,147,24],[191,49,147,12],[191,51,147,34],[191,108,147,12],[204,17,154,15,"GoogleFit"],[204,26]]},"type":"js/module"}]}