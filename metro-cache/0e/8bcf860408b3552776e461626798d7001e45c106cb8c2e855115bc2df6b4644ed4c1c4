{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"react-native-google-fit","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"react-native-universal-pedometer","data":{"isAsync":false}},{"name":"moment","data":{"isAsync":false}},{"name":"../../store/createStore","data":{"isAsync":false}},{"name":"../actions/activityActions","data":{"isAsync":false}},{"name":"./DateUtil","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  var _reactNativeGoogleFit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"react-native-google-fit\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[5], \"react-native\");\n\n  var _reactNativeUniversalPedometer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native-universal-pedometer\"));\n\n  var _moment = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"moment\"));\n\n  var _createStore = _$$_REQUIRE(_dependencyMap[8], \"../../store/createStore\");\n\n  var _activityActions = _$$_REQUIRE(_dependencyMap[9], \"../actions/activityActions\");\n\n  var _DateUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"./DateUtil\"));\n\n  var GoogleFitDateObj = {\n    startDate: null,\n    endDate: null\n  };\n\n  var GoogleFit = function () {\n    function GoogleFit() {\n      (0, _classCallCheck2.default)(this, GoogleFit);\n    }\n\n    (0, _createClass2.default)(GoogleFit, null, [{\n      key: \"authenticate\",\n      value: function authenticate() {\n        _reactNativeGoogleFit.default.authorize();\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return new Promise(function (resolve, reject) {\n          _reactNativeGoogleFit.default.isEnabled(function (isErr, result) {\n            if (isErr) return reject();\n\n            if (result === false) {\n              return resolve(false);\n            } else return resolve(true);\n          });\n        });\n      }\n    }, {\n      key: \"onAuthorization\",\n      value: function onAuthorization(callback) {\n        _reactNativeGoogleFit.default.onAuthorize(callback);\n      }\n    }, {\n      key: \"onAuthorizationFail\",\n      value: function onAuthorizationFail(callback) {\n        _reactNativeGoogleFit.default.onAuthorizeFailure(callback);\n      }\n    }, {\n      key: \"getStepsFromDate\",\n      value: function getStepsFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyStepCountSamples(options, function (err, result) {\n            if (err) return rej(new Error('Неуспешно извличане на данни от Google Fitnesss'));\n\n            if (result.length >= 2) {\n              return res(result[1].steps);\n            } else if (result.length >= 1) {\n              return res(result[0].steps);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"getCaloriesFromDate\",\n      value: function getCaloriesFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyCalorieSamples(options, function (isErr, result) {\n            if (isErr) {\n              return rej(new Error('Cannot fetch data from Google Fit - Calories'));\n            }\n\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"getDistanceFromDate\",\n      value: function getDistanceFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyDistanceSamples(options, function (isErr, result) {\n            console.log(arguments);\n            if (isErr == 'There is no any distance data for this period') return res([]);\n            if (isErr) return rej(new Error('Неуспешно извличане на данни от Google Fitness'));\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"startPedometerListener\",\n      value: function startPedometerListener(callback) {\n        _reactNativeUniversalPedometer.default.startPedometerUpdatesFromDate(Date.now(), callback);\n      }\n    }, {\n      key: \"stopPedometerListener\",\n      value: function stopPedometerListener() {\n        _reactNativeUniversalPedometer.default.stopPedometerUpdates();\n      }\n    }, {\n      key: \"fetchDataSingle\",\n      value: function fetchDataSingle(startDate) {\n        var sinceMidnight,\n            endDate,\n            options,\n            data,\n            response,\n            _args = arguments;\n        return _regenerator.default.async(function fetchDataSingle$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                sinceMidnight = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                endDate = _args.length > 2 ? _args[2] : undefined;\n\n                if (sinceMidnight) {\n                  startDate.startOf('day');\n                }\n\n                options = {\n                  startDate: startDate.toISOString(),\n                  endDate: endDate ? endDate.toISOString() : (0, _moment.default)().toISOString()\n                };\n                _context.prev = 4;\n                _context.next = 7;\n                return _regenerator.default.awrap(Promise.all([GoogleFit.getStepsFromDate(options), GoogleFit.getDistanceFromDate(options), GoogleFit.getCaloriesFromDate(options)]));\n\n              case 7:\n                data = _context.sent;\n                ;\n                response = {\n                  steps: data[0].length ? data[0][0].value : 0,\n                  distance: data[1].length ? data[1][0].distance : 0,\n                  calories: data[2].length ? data[2][0].calorie : 0\n                };\n\n                if (response.distance === 0) {\n                  response.distance = response.steps * 0.66;\n                }\n\n                return _context.abrupt(\"return\", response);\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](4);\n                return _context.abrupt(\"return\", new Error(_context.t0.message));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[4, 14]]);\n      }\n    }, {\n      key: \"sync\",\n      value: function sync() {\n        var state, createdAt, startDate, _ref, steps, distance, calories;\n\n        return _regenerator.default.async(function sync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = _createStore.store.getState();\n                createdAt = _DateUtil.default.unixToMoment(state.user.createdAt);\n                startDate = createdAt.isSame((0, _moment.default)(), 'date') ? createdAt : (0, _moment.default)().startOf('day');\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _regenerator.default.awrap(GoogleFit.fetchDataSingle(startDate, false));\n\n              case 6:\n                _ref = _context2.sent;\n                steps = _ref.steps;\n                distance = _ref.distance;\n                calories = _ref.calories;\n\n                _createStore.store.dispatch((0, _activityActions.setData)(steps, distance, calories));\n\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                _reactNative.Alert.alert('Грешка', 'Синхронизирането на данните с Google Fit беше неуспешно');\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[3, 13]]);\n      }\n    }]);\n    return GoogleFit;\n  }();\n\n  var _default = GoogleFit;\n  exports.default = _default;\n});","map":[[15,0,1,0],[17,0,2,0],[19,0,3,0],[21,0,4,0],[23,0,5,0],[25,0,6,0],[27,0,7,0],[29,0,9,0],[29,6,9,6,"GoogleFitDateObj"],[29,22,9,22],[29,25,9,25],[30,0,10,4,"startDate"],[30,4,10,4,"startDate"],[30,13,10,13],[30,15,10,15],[30,19,9,25],[31,0,11,4,"endDate"],[31,4,11,4,"endDate"],[31,11,11,11],[31,13,11,13],[32,0,9,25],[32,3,9,0],[34,6,14,6,"GoogleFit"],[34,15],[41,37,15,26],[42,0,16,8,"GFit"],[42,38,16,13,"authorize"],[42,47,16,8],[43,0,17,5],[46,40,19,29],[47,0,20,8],[47,15,20,15],[47,19,20,19,"Promise"],[47,26,20,15],[47,27,20,27],[47,37,20,28,"resolve"],[47,44,20,27],[47,46,20,37,"reject"],[47,52,20,27],[47,54,20,48],[48,0,21,12,"GFit"],[48,40,21,17,"isEnabled"],[48,49,21,12],[48,50,21,27],[48,60,21,36,"isErr"],[48,65,21,27],[48,67,21,43,"result"],[48,73,21,27],[48,75,21,51],[49,0,22,16],[49,16,22,19,"isErr"],[49,21,22,16],[49,23,22,26],[49,30,22,33,"reject"],[49,36,22,39],[49,38,22,26],[51,0,23,16],[51,16,23,19,"result"],[51,22,23,25],[51,27,23,30],[51,32,23,16],[51,34,23,37],[52,0,24,20],[52,21,24,27,"resolve"],[52,28,24,34],[52,29,24,35],[52,34,24,34],[52,35,24,20],[53,0,25,17],[53,13,23,16],[53,19,25,23],[53,26,25,30,"resolve"],[53,33,25,37],[53,34,25,38],[53,38,25,37],[53,39,25,23],[54,0,26,13],[54,11,21,12],[55,0,27,9],[55,9,20,15],[55,10,20,8],[56,0,28,5],[59,38,34,27,"callback"],[59,46],[59,48,34,37],[60,0,35,8,"GFit"],[60,38,35,13,"onAuthorize"],[60,49,35,8],[60,50,35,25,"callback"],[60,58,35,8],[61,0,36,5],[64,42,38,31,"callback"],[64,50],[64,52,38,41],[65,0,39,8,"GFit"],[65,38,39,13,"onAuthorizeFailure"],[65,56,39,8],[65,57,39,32,"callback"],[65,65,39,8],[66,0,40,5],[69,39,53,28,"options"],[69,46],[69,48,53,37],[70,0,54,8],[70,15,54,15],[70,19,54,19,"Promise"],[70,26,54,15],[70,27,54,27],[70,37,54,28,"res"],[70,40,54,27],[70,42,54,33,"rej"],[70,45,54,27],[70,47,54,41],[71,0,55,12,"GFit"],[71,40,55,17,"getDailyStepCountSamples"],[71,64,55,12],[71,65,55,42,"options"],[71,72,55,12],[71,74,55,51],[71,84,55,60,"err"],[71,87,55,51],[71,89,55,65,"result"],[71,95,55,51],[71,97,55,73],[72,0,56,16],[72,16,56,19,"err"],[72,19,56,16],[72,21,56,24],[72,28,56,31,"rej"],[72,31,56,34],[72,32,56,35],[72,36,56,39,"Error"],[72,41,56,35],[72,42,56,45],[72,91,56,35],[72,92,56,34],[72,93,56,24],[74,0,57,16],[74,16,57,19,"result"],[74,22,57,25],[74,23,57,26,"length"],[74,29,57,19],[74,33,57,36],[74,34,57,16],[74,36,57,39],[75,0,58,20],[75,21,58,27,"res"],[75,24,58,30],[75,25,58,31,"result"],[75,31,58,37],[75,32,58,38],[75,33,58,37],[75,34,58,31],[75,35,58,41,"steps"],[75,40,58,30],[75,41,58,20],[76,0,59,17],[76,13,57,16],[76,19,59,23],[76,23,59,26,"result"],[76,29,59,32],[76,30,59,33,"length"],[76,36,59,26],[76,40,59,43],[76,41,59,23],[76,43,59,46],[77,0,60,20],[77,21,60,27,"res"],[77,24,60,30],[77,25,60,31,"result"],[77,31,60,37],[77,32,60,38],[77,33,60,37],[77,34,60,31],[77,35,60,41,"steps"],[77,40,60,30],[77,41,60,20],[78,0,61,17],[79,0,62,13],[79,11,55,12],[80,0,63,9],[80,9,54,15],[80,10,54,8],[81,0,64,5],[84,42,72,31,"options"],[84,49],[84,51,72,40],[85,0,73,8],[85,15,73,15],[85,19,73,19,"Promise"],[85,26,73,15],[85,27,73,27],[85,37,73,28,"res"],[85,40,73,27],[85,42,73,33,"rej"],[85,45,73,27],[85,47,73,41],[86,0,74,12,"GFit"],[86,40,74,17,"getDailyCalorieSamples"],[86,62,74,12],[86,63,74,40,"options"],[86,70,74,12],[86,72,74,49],[86,82,74,58,"isErr"],[86,87,74,49],[86,89,74,65,"result"],[86,95,74,49],[86,97,74,73],[87,0,75,16],[87,16,75,19,"isErr"],[87,21,75,16],[87,23,75,26],[88,0,76,20],[88,21,76,27,"rej"],[88,24,76,30],[88,25,76,31],[88,29,76,35,"Error"],[88,34,76,31],[88,35,76,41],[88,81,76,31],[88,82,76,30],[88,83,76,20],[89,0,77,17],[91,0,78,16],[91,19,78,23,"res"],[91,22,78,26],[91,23,78,27,"result"],[91,29,78,26],[91,30,78,16],[92,0,79,13],[92,11,74,12],[93,0,80,9],[93,9,73,15],[93,10,73,8],[94,0,81,5],[97,42,89,31,"options"],[97,49],[97,51,89,40],[98,0,90,8],[98,15,90,15],[98,19,90,19,"Promise"],[98,26,90,15],[98,27,90,27],[98,37,90,28,"res"],[98,40,90,27],[98,42,90,33,"rej"],[98,45,90,27],[98,47,90,41],[99,0,91,12,"GFit"],[99,40,91,17,"getDailyDistanceSamples"],[99,63,91,12],[99,64,91,41,"options"],[99,71,91,12],[99,73,91,50],[99,83,91,59,"isErr"],[99,88,91,50],[99,90,91,66,"result"],[99,96,91,50],[99,98,91,74],[100,0,92,16,"console"],[100,12,92,16,"console"],[100,19,92,23],[100,20,92,24,"log"],[100,23,92,16],[100,24,92,28,"arguments"],[100,33,92,16],[101,0,93,16],[101,16,93,19,"isErr"],[101,21,93,24],[101,25,93,28],[101,72,93,16],[101,74,93,77],[101,81,93,84,"res"],[101,84,93,87],[101,85,93,88],[101,87,93,87],[101,88,93,77],[102,0,94,16],[102,16,94,19,"isErr"],[102,21,94,16],[102,23,94,26],[102,30,94,33,"rej"],[102,33,94,36],[102,34,94,37],[102,38,94,41,"Error"],[102,43,94,37],[102,44,94,47],[102,92,94,37],[102,93,94,36],[102,94,94,26],[103,0,95,16],[103,19,95,23,"res"],[103,22,95,26],[103,23,95,27,"result"],[103,29,95,26],[103,30,95,16],[104,0,96,13],[104,11,91,12],[105,0,97,9],[105,9,90,15],[105,10,90,8],[106,0,98,5],[109,45,104,34,"callback"],[109,53],[109,55,104,44],[110,0,105,8,"Pedometer"],[110,47,105,18,"startPedometerUpdatesFromDate"],[110,76,105,8],[110,77,105,48,"Date"],[110,81,105,52],[110,82,105,53,"now"],[110,85,105,48],[110,87,105,8],[110,89,105,60,"callback"],[110,97,105,8],[111,0,106,5],[114,46,108,35],[115,0,109,8,"Pedometer"],[115,47,109,18,"stopPedometerUpdates"],[115,67,109,8],[116,0,110,5],[119,38,118,33,"startDate"],[119,47],[130,0,118,44,"sinceMidnight"],[130,16,118,44,"sinceMidnight"],[130,29],[130,88,118,60],[130,93],[131,0,118,67,"endDate"],[131,16,118,67,"endDate"],[131,23],[133,0,119,8],[133,20,119,11,"sinceMidnight"],[133,33,119,8],[133,35,119,26],[134,0,120,12,"startDate"],[134,18,120,12,"startDate"],[134,27,120,21],[134,28,120,22,"startOf"],[134,35,120,12],[134,36,120,30],[134,41,120,12],[135,0,121,9],[137,0,122,14,"options"],[137,16,122,14,"options"],[137,23],[137,26,122,24],[138,0,123,12,"startDate"],[138,18,123,12,"startDate"],[138,27,123,21],[138,29,123,23,"startDate"],[138,38,123,32],[138,39,123,33,"toISOString"],[138,50,123,23],[138,52,122,24],[139,0,124,12,"endDate"],[139,18,124,12,"endDate"],[139,25,124,19],[139,27,124,21,"endDate"],[139,34,124,28],[139,37,124,31,"endDate"],[139,44,124,38],[139,45,124,39,"toISOString"],[139,56,124,31],[139,58,124,28],[139,61,124,55],[139,84,124,64,"toISOString"],[139,95,124,55],[140,0,122,24],[140,17],[143,50,128,31,"Promise"],[143,57,128,38],[143,58,128,39,"all"],[143,61,128,31],[143,62,128,43],[143,63,129,16,"GoogleFit"],[143,72,129,25],[143,73,129,26,"getStepsFromDate"],[143,89,129,16],[143,90,129,43,"options"],[143,97,129,16],[143,98,128,43],[143,100,130,16,"GoogleFit"],[143,109,130,25],[143,110,130,26,"getDistanceFromDate"],[143,129,130,16],[143,130,130,46,"options"],[143,137,130,16],[143,138,128,43],[143,140,131,16,"GoogleFit"],[143,149,131,25],[143,150,131,26,"getCaloriesFromDate"],[143,169,131,16],[143,170,131,46,"options"],[143,177,131,16],[143,178,128,43],[143,179,128,31],[143,180],[146,0,128,18,"data"],[146,16,128,18,"data"],[146,20],[147,0,132,15],[148,0,134,18,"response"],[148,16,134,18,"response"],[148,24],[148,27,134,29],[149,0,135,16,"steps"],[149,18,135,16,"steps"],[149,23,135,21],[149,25,135,23,"data"],[149,29,135,27],[149,30,135,28],[149,31,135,27],[149,32,135,23],[149,33,135,31,"length"],[149,39,135,23],[149,42,135,40,"data"],[149,46,135,44],[149,47,135,45],[149,48,135,44],[149,49,135,40],[149,50,135,48],[149,51,135,40],[149,53,135,51,"value"],[149,58,135,23],[149,61,135,59],[149,62,134,29],[150,0,136,16,"distance"],[150,18,136,16,"distance"],[150,26,136,24],[150,28,136,26,"data"],[150,32,136,30],[150,33,136,31],[150,34,136,30],[150,35,136,26],[150,36,136,34,"length"],[150,42,136,26],[150,45,136,43,"data"],[150,49,136,47],[150,50,136,48],[150,51,136,47],[150,52,136,43],[150,53,136,51],[150,54,136,43],[150,56,136,54,"distance"],[150,64,136,26],[150,67,136,65],[150,68,134,29],[151,0,137,16,"calories"],[151,18,137,16,"calories"],[151,26,137,24],[151,28,137,26,"data"],[151,32,137,30],[151,33,137,31],[151,34,137,30],[151,35,137,26],[151,36,137,34,"length"],[151,42,137,26],[151,45,137,43,"data"],[151,49,137,47],[151,50,137,48],[151,51,137,47],[151,52,137,43],[151,53,137,51],[151,54,137,43],[151,56,137,54,"calorie"],[151,63,137,26],[151,66,137,64],[152,0,134,29],[152,17],[154,0,140,12],[154,20,140,15,"response"],[154,28,140,23],[154,29,140,24,"distance"],[154,37,140,15],[154,42,140,37],[154,43,140,12],[154,45,140,40],[155,0,141,16,"response"],[155,18,141,16,"response"],[155,26,141,24],[155,27,141,25,"distance"],[155,35,141,16],[155,38,141,36,"response"],[155,46,141,44],[155,47,141,45,"steps"],[155,52,141,36],[155,55,141,53],[155,59,141,16],[156,0,142,13],[158,49,144,19,"response"],[158,57],[163,49,147,19],[163,53,147,23,"Error"],[163,58,147,19],[163,59,147,29],[163,71,147,33,"message"],[163,78,147,19],[163,79],[181,0,152,14,"state"],[181,16,152,14,"state"],[181,21],[181,24,152,22,"store"],[181,43,152,28,"getState"],[181,51,152,22],[181,53],[182,0,153,14,"createdAt"],[182,16,153,14,"createdAt"],[182,25],[182,28,153,26,"DateUtil"],[182,46,153,35,"unixToMoment"],[182,58,153,26],[182,59,153,48,"state"],[182,64,153,53],[182,65,153,54,"user"],[182,69,153,48],[182,70,153,59,"createdAt"],[182,79,153,26],[182,80],[183,0,155,14,"startDate"],[183,16,155,14,"startDate"],[183,25],[183,28,155,26,"createdAt"],[183,37,155,35],[183,38,155,36,"isSame"],[183,44,155,26],[183,45,155,43],[183,67,155,26],[183,69,155,53],[183,75,155,26],[183,79,155,63,"createdAt"],[183,88,155,26],[183,91,155,75],[183,114,155,84,"startOf"],[183,121,155,75],[183,122,155,92],[183,127,155,75],[183,128],[186,50,158,56,"GoogleFit"],[186,59,158,65],[186,60,158,66,"fetchDataSingle"],[186,75,158,56],[186,76,158,82,"startDate"],[186,85,158,56],[186,87,158,93],[186,92,158,56],[186,93],[190,0,158,20,"steps"],[190,16,158,20,"steps"],[190,21],[190,29,158,20,"steps"],[190,34],[191,0,158,27,"distance"],[191,16,158,27,"distance"],[191,24],[191,32,158,27,"distance"],[191,40],[192,0,158,37,"calories"],[192,16,158,37,"calories"],[192,24],[192,32,158,37,"calories"],[192,40],[194,0,160,12,"store"],[194,35,160,18,"dispatch"],[194,43,160,12],[194,44,160,27],[194,74,160,35,"steps"],[194,79,160,27],[194,81,160,42,"distance"],[194,89,160,27],[194,91,160,52,"calories"],[194,99,160,27],[194,100,160,12],[203,0,163,12,"Alert"],[203,35,163,18,"alert"],[203,40,163,12],[203,41,163,24],[203,49,163,12],[203,51,163,34],[203,108,163,12],[216,17,170,15,"GoogleFit"],[216,26]]},"type":"js/module"}]}