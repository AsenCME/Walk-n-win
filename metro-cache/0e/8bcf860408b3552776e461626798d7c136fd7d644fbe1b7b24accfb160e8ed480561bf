{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"react-native-google-fit","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"react-native-universal-pedometer","data":{"isAsync":false}},{"name":"moment","data":{"isAsync":false}},{"name":"../../store/createStore","data":{"isAsync":false}},{"name":"../actions/activityActions","data":{"isAsync":false}},{"name":"./DateUtil","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  var _reactNativeGoogleFit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"react-native-google-fit\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[5], \"react-native\");\n\n  var _reactNativeUniversalPedometer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native-universal-pedometer\"));\n\n  var _moment = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"moment\"));\n\n  var _createStore = _$$_REQUIRE(_dependencyMap[8], \"../../store/createStore\");\n\n  var _activityActions = _$$_REQUIRE(_dependencyMap[9], \"../actions/activityActions\");\n\n  var _DateUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"./DateUtil\"));\n\n  var GoogleFitDateObj = {\n    startDate: null,\n    endDate: null\n  };\n\n  var GoogleFit = function () {\n    function GoogleFit() {\n      (0, _classCallCheck2.default)(this, GoogleFit);\n    }\n\n    (0, _createClass2.default)(GoogleFit, null, [{\n      key: \"authenticate\",\n      value: function authenticate() {\n        _reactNativeGoogleFit.default.authorize();\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return new Promise(function (resolve, reject) {\n          _reactNativeGoogleFit.default.isEnabled(function (isErr, result) {\n            if (isErr) return reject();\n\n            if (result === false) {\n              return resolve(false);\n            } else return resolve(true);\n          });\n        });\n      }\n    }, {\n      key: \"onAuthorization\",\n      value: function onAuthorization(callback) {\n        _reactNativeGoogleFit.default.onAuthorize(callback);\n      }\n    }, {\n      key: \"onAuthorizationFail\",\n      value: function onAuthorizationFail(callback) {\n        _reactNativeGoogleFit.default.onAuthorizeFailure(callback);\n      }\n    }, {\n      key: \"getStepsFromDate\",\n      value: function getStepsFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyStepCountSamples(options, function (err, result) {\n            if (err) return rej(new Error('Неуспешно извличане на данни от Google Fitnesss'));\n\n            if (result.length >= 2) {\n              return res(result[1].steps);\n            } else if (result.length >= 1) {\n              return res(result[0].steps);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"getCaloriesFromDate\",\n      value: function getCaloriesFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyCalorieSamples(options, function (isErr, result) {\n            if (isErr) {\n              return rej(new Error('Cannot fetch data from Google Fit - Calories'));\n            }\n\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"getDistanceFromDate\",\n      value: function getDistanceFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyDistanceSamples(options, function (isErr, result) {\n            if (isErr == 'There is no any distance data for this period') return res([]);\n            if (isErr) return rej(new Error('Неуспешно извличане на данни от Google Fitness'));\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"startPedometerListener\",\n      value: function startPedometerListener(callback) {\n        _reactNativeUniversalPedometer.default.startPedometerUpdatesFromDate(Date.now(), callback);\n      }\n    }, {\n      key: \"stopPedometerListener\",\n      value: function stopPedometerListener() {\n        _reactNativeUniversalPedometer.default.stopPedometerUpdates();\n      }\n    }, {\n      key: \"fetchDataSingle\",\n      value: function fetchDataSingle(startDate) {\n        var sinceMidnight,\n            endDate,\n            options,\n            data,\n            response,\n            _args = arguments;\n        return _regenerator.default.async(function fetchDataSingle$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                sinceMidnight = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                endDate = _args.length > 2 ? _args[2] : undefined;\n\n                if (sinceMidnight) {\n                  startDate.startOf('day');\n                }\n\n                options = {\n                  startDate: startDate.toISOString(),\n                  endDate: endDate ? endDate.toISOString() : (0, _moment.default)().toISOString()\n                };\n                _context.prev = 4;\n                _context.next = 7;\n                return _regenerator.default.awrap(Promise.all([GoogleFit.getStepsFromDate(options), GoogleFit.getDistanceFromDate(options), GoogleFit.getCaloriesFromDate(options)]));\n\n              case 7:\n                data = _context.sent;\n                ;\n                response = {\n                  steps: data[0].length ? data[0][0].value : 0,\n                  distance: data[1].length ? data[1][0].distance : 0,\n                  calories: data[2].length ? data[2][0].calorie : 0\n                };\n\n                if (response.distance === 0) {\n                  response.distance = response.steps * 0.66;\n                }\n\n                return _context.abrupt(\"return\", response);\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](4);\n                return _context.abrupt(\"return\", new Error(_context.t0.message));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[4, 14]]);\n      }\n    }, {\n      key: \"sync\",\n      value: function sync() {\n        var state, createdAt, startDate, _ref, steps, distance, calories;\n\n        return _regenerator.default.async(function sync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = _createStore.store.getState();\n                createdAt = _DateUtil.default.unixToMoment(state.user.createdAt);\n                startDate = createdAt.isSame((0, _moment.default)(), 'date') ? createdAt : (0, _moment.default)().startOf('day');\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _regenerator.default.awrap(GoogleFit.fetchDataSingle(startDate, false));\n\n              case 6:\n                _ref = _context2.sent;\n                steps = _ref.steps;\n                distance = _ref.distance;\n                calories = _ref.calories;\n\n                _createStore.store.dispatch((0, _activityActions.setData)(steps, distance, calories));\n\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                _reactNative.Alert.alert('Грешка', 'Синхронизирането на данните с Google Fit беше неуспешно');\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[3, 13]]);\n      }\n    }]);\n    return GoogleFit;\n  }();\n\n  var _default = GoogleFit;\n  exports.default = _default;\n});","map":[[15,0,1,0],[17,0,2,0],[19,0,3,0],[21,0,4,0],[23,0,5,0],[25,0,6,0],[27,0,7,0],[29,0,9,0],[29,6,9,6,"GoogleFitDateObj"],[29,22,9,22],[29,25,9,25],[30,0,10,4,"startDate"],[30,4,10,4,"startDate"],[30,13,10,13],[30,15,10,15],[30,19,9,25],[31,0,11,4,"endDate"],[31,4,11,4,"endDate"],[31,11,11,11],[31,13,11,13],[32,0,9,25],[32,3,9,0],[34,6,14,6,"GoogleFit"],[34,15],[41,37,15,26],[42,0,16,8,"GFit"],[42,38,16,13,"authorize"],[42,47,16,8],[43,0,17,5],[46,40,19,29],[47,0,20,8],[47,15,20,15],[47,19,20,19,"Promise"],[47,26,20,15],[47,27,20,27],[47,37,20,28,"resolve"],[47,44,20,27],[47,46,20,37,"reject"],[47,52,20,27],[47,54,20,48],[48,0,21,12,"GFit"],[48,40,21,17,"isEnabled"],[48,49,21,12],[48,50,21,27],[48,60,21,36,"isErr"],[48,65,21,27],[48,67,21,43,"result"],[48,73,21,27],[48,75,21,51],[49,0,22,16],[49,16,22,19,"isErr"],[49,21,22,16],[49,23,22,26],[49,30,22,33,"reject"],[49,36,22,39],[49,38,22,26],[51,0,23,16],[51,16,23,19,"result"],[51,22,23,25],[51,27,23,30],[51,32,23,16],[51,34,23,37],[52,0,24,20],[52,21,24,27,"resolve"],[52,28,24,34],[52,29,24,35],[52,34,24,34],[52,35,24,20],[53,0,25,17],[53,13,23,16],[53,19,25,23],[53,26,25,30,"resolve"],[53,33,25,37],[53,34,25,38],[53,38,25,37],[53,39,25,23],[54,0,26,13],[54,11,21,12],[55,0,27,9],[55,9,20,15],[55,10,20,8],[56,0,28,5],[59,38,34,27,"callback"],[59,46],[59,48,34,37],[60,0,35,8,"GFit"],[60,38,35,13,"onAuthorize"],[60,49,35,8],[60,50,35,25,"callback"],[60,58,35,8],[61,0,36,5],[64,42,38,31,"callback"],[64,50],[64,52,38,41],[65,0,39,8,"GFit"],[65,38,39,13,"onAuthorizeFailure"],[65,56,39,8],[65,57,39,32,"callback"],[65,65,39,8],[66,0,40,5],[69,39,53,28,"options"],[69,46],[69,48,53,37],[70,0,54,8],[70,15,54,15],[70,19,54,19,"Promise"],[70,26,54,15],[70,27,54,27],[70,37,54,28,"res"],[70,40,54,27],[70,42,54,33,"rej"],[70,45,54,27],[70,47,54,41],[71,0,55,12,"GFit"],[71,40,55,17,"getDailyStepCountSamples"],[71,64,55,12],[71,65,55,42,"options"],[71,72,55,12],[71,74,55,51],[71,84,55,60,"err"],[71,87,55,51],[71,89,55,65,"result"],[71,95,55,51],[71,97,55,73],[72,0,56,16],[72,16,56,19,"err"],[72,19,56,16],[72,21,56,24],[72,28,56,31,"rej"],[72,31,56,34],[72,32,56,35],[72,36,56,39,"Error"],[72,41,56,35],[72,42,56,45],[72,91,56,35],[72,92,56,34],[72,93,56,24],[74,0,57,16],[74,16,57,19,"result"],[74,22,57,25],[74,23,57,26,"length"],[74,29,57,19],[74,33,57,36],[74,34,57,16],[74,36,57,39],[75,0,58,20],[75,21,58,27,"res"],[75,24,58,30],[75,25,58,31,"result"],[75,31,58,37],[75,32,58,38],[75,33,58,37],[75,34,58,31],[75,35,58,41,"steps"],[75,40,58,30],[75,41,58,20],[76,0,59,17],[76,13,57,16],[76,19,59,23],[76,23,59,26,"result"],[76,29,59,32],[76,30,59,33,"length"],[76,36,59,26],[76,40,59,43],[76,41,59,23],[76,43,59,46],[77,0,60,20],[77,21,60,27,"res"],[77,24,60,30],[77,25,60,31,"result"],[77,31,60,37],[77,32,60,38],[77,33,60,37],[77,34,60,31],[77,35,60,41,"steps"],[77,40,60,30],[77,41,60,20],[78,0,61,17],[79,0,62,13],[79,11,55,12],[80,0,63,9],[80,9,54,15],[80,10,54,8],[81,0,64,5],[84,42,72,31,"options"],[84,49],[84,51,72,40],[85,0,73,8],[85,15,73,15],[85,19,73,19,"Promise"],[85,26,73,15],[85,27,73,27],[85,37,73,28,"res"],[85,40,73,27],[85,42,73,33,"rej"],[85,45,73,27],[85,47,73,41],[86,0,74,12,"GFit"],[86,40,74,17,"getDailyCalorieSamples"],[86,62,74,12],[86,63,74,40,"options"],[86,70,74,12],[86,72,74,49],[86,82,74,58,"isErr"],[86,87,74,49],[86,89,74,65,"result"],[86,95,74,49],[86,97,74,73],[87,0,75,16],[87,16,75,19,"isErr"],[87,21,75,16],[87,23,75,26],[88,0,76,20],[88,21,76,27,"rej"],[88,24,76,30],[88,25,76,31],[88,29,76,35,"Error"],[88,34,76,31],[88,35,76,41],[88,81,76,31],[88,82,76,30],[88,83,76,20],[89,0,77,17],[91,0,78,16],[91,19,78,23,"res"],[91,22,78,26],[91,23,78,27,"result"],[91,29,78,26],[91,30,78,16],[92,0,79,13],[92,11,74,12],[93,0,80,9],[93,9,73,15],[93,10,73,8],[94,0,81,5],[97,42,89,31,"options"],[97,49],[97,51,89,40],[98,0,90,8],[98,15,90,15],[98,19,90,19,"Promise"],[98,26,90,15],[98,27,90,27],[98,37,90,28,"res"],[98,40,90,27],[98,42,90,33,"rej"],[98,45,90,27],[98,47,90,41],[99,0,91,12,"GFit"],[99,40,91,17,"getDailyDistanceSamples"],[99,63,91,12],[99,64,91,41,"options"],[99,71,91,12],[99,73,91,50],[99,83,91,59,"isErr"],[99,88,91,50],[99,90,91,66,"result"],[99,96,91,50],[99,98,91,74],[100,0,92,16],[100,16,92,19,"isErr"],[100,21,92,24],[100,25,92,28],[100,72,92,16],[100,74,92,77],[100,81,92,84,"res"],[100,84,92,87],[100,85,92,88],[100,87,92,87],[100,88,92,77],[101,0,93,16],[101,16,93,19,"isErr"],[101,21,93,16],[101,23,93,26],[101,30,93,33,"rej"],[101,33,93,36],[101,34,93,37],[101,38,93,41,"Error"],[101,43,93,37],[101,44,93,47],[101,92,93,37],[101,93,93,36],[101,94,93,26],[102,0,94,16],[102,19,94,23,"res"],[102,22,94,26],[102,23,94,27,"result"],[102,29,94,26],[102,30,94,16],[103,0,95,13],[103,11,91,12],[104,0,96,9],[104,9,90,15],[104,10,90,8],[105,0,97,5],[108,45,103,34,"callback"],[108,53],[108,55,103,44],[109,0,104,8,"Pedometer"],[109,47,104,18,"startPedometerUpdatesFromDate"],[109,76,104,8],[109,77,104,48,"Date"],[109,81,104,52],[109,82,104,53,"now"],[109,85,104,48],[109,87,104,8],[109,89,104,60,"callback"],[109,97,104,8],[110,0,105,5],[113,46,107,35],[114,0,108,8,"Pedometer"],[114,47,108,18,"stopPedometerUpdates"],[114,67,108,8],[115,0,109,5],[118,38,117,33,"startDate"],[118,47],[129,0,117,44,"sinceMidnight"],[129,16,117,44,"sinceMidnight"],[129,29],[129,88,117,60],[129,93],[130,0,117,67,"endDate"],[130,16,117,67,"endDate"],[130,23],[132,0,118,8],[132,20,118,11,"sinceMidnight"],[132,33,118,8],[132,35,118,26],[133,0,119,12,"startDate"],[133,18,119,12,"startDate"],[133,27,119,21],[133,28,119,22,"startOf"],[133,35,119,12],[133,36,119,30],[133,41,119,12],[134,0,120,9],[136,0,121,14,"options"],[136,16,121,14,"options"],[136,23],[136,26,121,24],[137,0,122,12,"startDate"],[137,18,122,12,"startDate"],[137,27,122,21],[137,29,122,23,"startDate"],[137,38,122,32],[137,39,122,33,"toISOString"],[137,50,122,23],[137,52,121,24],[138,0,123,12,"endDate"],[138,18,123,12,"endDate"],[138,25,123,19],[138,27,123,21,"endDate"],[138,34,123,28],[138,37,123,31,"endDate"],[138,44,123,38],[138,45,123,39,"toISOString"],[138,56,123,31],[138,58,123,28],[138,61,123,55],[138,84,123,64,"toISOString"],[138,95,123,55],[139,0,121,24],[139,17],[142,50,127,31,"Promise"],[142,57,127,38],[142,58,127,39,"all"],[142,61,127,31],[142,62,127,43],[142,63,128,16,"GoogleFit"],[142,72,128,25],[142,73,128,26,"getStepsFromDate"],[142,89,128,16],[142,90,128,43,"options"],[142,97,128,16],[142,98,127,43],[142,100,129,16,"GoogleFit"],[142,109,129,25],[142,110,129,26,"getDistanceFromDate"],[142,129,129,16],[142,130,129,46,"options"],[142,137,129,16],[142,138,127,43],[142,140,130,16,"GoogleFit"],[142,149,130,25],[142,150,130,26,"getCaloriesFromDate"],[142,169,130,16],[142,170,130,46,"options"],[142,177,130,16],[142,178,127,43],[142,179,127,31],[142,180],[145,0,127,18,"data"],[145,16,127,18,"data"],[145,20],[146,0,131,15],[147,0,133,18,"response"],[147,16,133,18,"response"],[147,24],[147,27,133,29],[148,0,134,16,"steps"],[148,18,134,16,"steps"],[148,23,134,21],[148,25,134,23,"data"],[148,29,134,27],[148,30,134,28],[148,31,134,27],[148,32,134,23],[148,33,134,31,"length"],[148,39,134,23],[148,42,134,40,"data"],[148,46,134,44],[148,47,134,45],[148,48,134,44],[148,49,134,40],[148,50,134,48],[148,51,134,40],[148,53,134,51,"value"],[148,58,134,23],[148,61,134,59],[148,62,133,29],[149,0,135,16,"distance"],[149,18,135,16,"distance"],[149,26,135,24],[149,28,135,26,"data"],[149,32,135,30],[149,33,135,31],[149,34,135,30],[149,35,135,26],[149,36,135,34,"length"],[149,42,135,26],[149,45,135,43,"data"],[149,49,135,47],[149,50,135,48],[149,51,135,47],[149,52,135,43],[149,53,135,51],[149,54,135,43],[149,56,135,54,"distance"],[149,64,135,26],[149,67,135,65],[149,68,133,29],[150,0,136,16,"calories"],[150,18,136,16,"calories"],[150,26,136,24],[150,28,136,26,"data"],[150,32,136,30],[150,33,136,31],[150,34,136,30],[150,35,136,26],[150,36,136,34,"length"],[150,42,136,26],[150,45,136,43,"data"],[150,49,136,47],[150,50,136,48],[150,51,136,47],[150,52,136,43],[150,53,136,51],[150,54,136,43],[150,56,136,54,"calorie"],[150,63,136,26],[150,66,136,64],[151,0,133,29],[151,17],[153,0,139,12],[153,20,139,15,"response"],[153,28,139,23],[153,29,139,24,"distance"],[153,37,139,15],[153,42,139,37],[153,43,139,12],[153,45,139,40],[154,0,140,16,"response"],[154,18,140,16,"response"],[154,26,140,24],[154,27,140,25,"distance"],[154,35,140,16],[154,38,140,36,"response"],[154,46,140,44],[154,47,140,45,"steps"],[154,52,140,36],[154,55,140,53],[154,59,140,16],[155,0,141,13],[157,49,143,19,"response"],[157,57],[162,49,146,19],[162,53,146,23,"Error"],[162,58,146,19],[162,59,146,29],[162,71,146,33,"message"],[162,78,146,19],[162,79],[180,0,151,14,"state"],[180,16,151,14,"state"],[180,21],[180,24,151,22,"store"],[180,43,151,28,"getState"],[180,51,151,22],[180,53],[181,0,152,14,"createdAt"],[181,16,152,14,"createdAt"],[181,25],[181,28,152,26,"DateUtil"],[181,46,152,35,"unixToMoment"],[181,58,152,26],[181,59,152,48,"state"],[181,64,152,53],[181,65,152,54,"user"],[181,69,152,48],[181,70,152,59,"createdAt"],[181,79,152,26],[181,80],[182,0,154,14,"startDate"],[182,16,154,14,"startDate"],[182,25],[182,28,154,26,"createdAt"],[182,37,154,35],[182,38,154,36,"isSame"],[182,44,154,26],[182,45,154,43],[182,67,154,26],[182,69,154,53],[182,75,154,26],[182,79,154,63,"createdAt"],[182,88,154,26],[182,91,154,75],[182,114,154,84,"startOf"],[182,121,154,75],[182,122,154,92],[182,127,154,75],[182,128],[185,50,157,56,"GoogleFit"],[185,59,157,65],[185,60,157,66,"fetchDataSingle"],[185,75,157,56],[185,76,157,82,"startDate"],[185,85,157,56],[185,87,157,93],[185,92,157,56],[185,93],[189,0,157,20,"steps"],[189,16,157,20,"steps"],[189,21],[189,29,157,20,"steps"],[189,34],[190,0,157,27,"distance"],[190,16,157,27,"distance"],[190,24],[190,32,157,27,"distance"],[190,40],[191,0,157,37,"calories"],[191,16,157,37,"calories"],[191,24],[191,32,157,37,"calories"],[191,40],[193,0,159,12,"store"],[193,35,159,18,"dispatch"],[193,43,159,12],[193,44,159,27],[193,74,159,35,"steps"],[193,79,159,27],[193,81,159,42,"distance"],[193,89,159,27],[193,91,159,52,"calories"],[193,99,159,27],[193,100,159,12],[202,0,162,12,"Alert"],[202,35,162,18,"alert"],[202,40,162,12],[202,41,162,24],[202,49,162,12],[202,51,162,34],[202,108,162,12],[215,17,169,15,"GoogleFit"],[215,26]]},"type":"js/module"}]}