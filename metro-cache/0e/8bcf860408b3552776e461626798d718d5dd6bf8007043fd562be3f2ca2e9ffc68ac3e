{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"react-native-google-fit","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"react-native-universal-pedometer","data":{"isAsync":false}},{"name":"moment","data":{"isAsync":false}},{"name":"../../store/createStore","data":{"isAsync":false}},{"name":"../actions/activityActions","data":{"isAsync":false}},{"name":"./DateUtil","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  var _reactNativeGoogleFit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"react-native-google-fit\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[5], \"react-native\");\n\n  var _reactNativeUniversalPedometer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native-universal-pedometer\"));\n\n  var _moment = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"moment\"));\n\n  var _createStore = _$$_REQUIRE(_dependencyMap[8], \"../../store/createStore\");\n\n  var _activityActions = _$$_REQUIRE(_dependencyMap[9], \"../actions/activityActions\");\n\n  var _DateUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"./DateUtil\"));\n\n  var GoogleFitDateObj = {\n    startDate: null,\n    endDate: null\n  };\n\n  var GoogleFit = function () {\n    function GoogleFit() {\n      (0, _classCallCheck2.default)(this, GoogleFit);\n    }\n\n    (0, _createClass2.default)(GoogleFit, null, [{\n      key: \"authenticate\",\n      value: function authenticate() {\n        _reactNativeGoogleFit.default.authorize();\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return new Promise(function (resolve, reject) {\n          _reactNativeGoogleFit.default.isEnabled(function (isErr, result) {\n            if (isErr) return reject();\n\n            if (result === false) {\n              return resolve(false);\n            } else return resolve(true);\n          });\n        });\n      }\n    }, {\n      key: \"onAuthorization\",\n      value: function onAuthorization(callback) {\n        _reactNativeGoogleFit.default.onAuthorize(callback);\n      }\n    }, {\n      key: \"onAuthorizationFail\",\n      value: function onAuthorizationFail(callback) {\n        _reactNativeGoogleFit.default.onAuthorizeFailure(callback);\n      }\n    }, {\n      key: \"getStepsFromDate\",\n      value: function getStepsFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyStepCountSamples(options, function (err, result) {\n            if (err) return rej(new Error('Неуспешно извличане на данни от Google Fitnesss'));\n\n            if (result.length >= 2) {\n              return res(result[1].steps);\n            } else if (result.length >= 1) {\n              return res(result[0].steps);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"getCaloriesFromDate\",\n      value: function getCaloriesFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyCalorieSamples(options, function (isErr, result) {\n            if (isErr) {\n              return rej(new Error('Cannot fetch data from Google Fit - Calories'));\n            }\n\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"getDistanceFromDate\",\n      value: function getDistanceFromDate(options) {\n        return new Promise(function (res, rej) {\n          _reactNativeGoogleFit.default.getDailyDistanceSamples(options, function (isErr, result) {\n            console.log(arguments, options);\n            if (isErr == 'There is no any distance data for this period') return res([]);\n            if (isErr) return rej(new Error('Неуспешно извличане на данни от Google Fitness'));\n            console.log(result);\n            return res(result);\n          });\n        });\n      }\n    }, {\n      key: \"startPedometerListener\",\n      value: function startPedometerListener(callback) {\n        _reactNativeUniversalPedometer.default.startPedometerUpdatesFromDate(Date.now(), callback);\n      }\n    }, {\n      key: \"stopPedometerListener\",\n      value: function stopPedometerListener() {\n        _reactNativeUniversalPedometer.default.stopPedometerUpdates();\n      }\n    }, {\n      key: \"fetchDataSingle\",\n      value: function fetchDataSingle(startDate) {\n        var sinceMidnight,\n            endDate,\n            options,\n            data,\n            _args = arguments;\n        return _regenerator.default.async(function fetchDataSingle$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                sinceMidnight = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                endDate = _args.length > 2 ? _args[2] : undefined;\n\n                if (sinceMidnight) {\n                  startDate.startOf('day');\n                }\n\n                options = {\n                  startDate: startDate.toISOString(),\n                  endDate: endDate ? endDate.toISOString() : (0, _moment.default)().toISOString()\n                };\n                _context.prev = 4;\n                _context.next = 7;\n                return _regenerator.default.awrap(Promise.all([GoogleFit.getStepsFromDate(options), GoogleFit.getDistanceFromDate(options), GoogleFit.getCaloriesFromDate(options)]));\n\n              case 7:\n                data = _context.sent;\n                ;\n                return _context.abrupt(\"return\", {\n                  steps: data[0].length > 0 ? data[0][0].value : 0,\n                  distance: data[1].length > 0 ? data[1][0].distance : 0,\n                  calories: data[2].length > 0 ? data[2][0].calorie : 0\n                });\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](4);\n                console.log(_context.t0);\n                throw new Error('Cannot fetch data from Google Fit');\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[4, 12]]);\n      }\n    }, {\n      key: \"sync\",\n      value: function sync() {\n        var state, createdAt, startDate, _ref, steps, distance, calories;\n\n        return _regenerator.default.async(function sync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = _createStore.store.getState();\n                createdAt = _DateUtil.default.unixToMoment(state.user.createdAt);\n                startDate = createdAt.isSame((0, _moment.default)(), 'date') ? createdAt : (0, _moment.default)().startOf('day');\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _regenerator.default.awrap(GoogleFit.fetchDataSingle(startDate, false));\n\n              case 6:\n                _ref = _context2.sent;\n                steps = _ref.steps;\n                distance = _ref.distance;\n                calories = _ref.calories;\n\n                _createStore.store.dispatch((0, _activityActions.setData)(steps, distance, calories));\n\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                _reactNative.Alert.alert('Грешка', 'Синхронизирането на данните с Google Fit беше неуспешно');\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[3, 13]]);\n      }\n    }]);\n    return GoogleFit;\n  }();\n\n  var _default = GoogleFit;\n  exports.default = _default;\n});","map":[[15,0,1,0],[17,0,2,0],[19,0,3,0],[21,0,4,0],[23,0,5,0],[25,0,6,0],[27,0,7,0],[29,0,9,0],[29,6,9,6,"GoogleFitDateObj"],[29,22,9,22],[29,25,9,25],[30,0,10,4,"startDate"],[30,4,10,4,"startDate"],[30,13,10,13],[30,15,10,15],[30,19,9,25],[31,0,11,4,"endDate"],[31,4,11,4,"endDate"],[31,11,11,11],[31,13,11,13],[32,0,9,25],[32,3,9,0],[34,6,14,6,"GoogleFit"],[34,15],[41,37,15,26],[42,0,16,8,"GFit"],[42,38,16,13,"authorize"],[42,47,16,8],[43,0,17,5],[46,40,19,29],[47,0,20,8],[47,15,20,15],[47,19,20,19,"Promise"],[47,26,20,15],[47,27,20,27],[47,37,20,28,"resolve"],[47,44,20,27],[47,46,20,37,"reject"],[47,52,20,27],[47,54,20,48],[48,0,21,12,"GFit"],[48,40,21,17,"isEnabled"],[48,49,21,12],[48,50,21,27],[48,60,21,36,"isErr"],[48,65,21,27],[48,67,21,43,"result"],[48,73,21,27],[48,75,21,51],[49,0,22,16],[49,16,22,19,"isErr"],[49,21,22,16],[49,23,22,26],[49,30,22,33,"reject"],[49,36,22,39],[49,38,22,26],[51,0,23,16],[51,16,23,19,"result"],[51,22,23,25],[51,27,23,30],[51,32,23,16],[51,34,23,37],[52,0,24,20],[52,21,24,27,"resolve"],[52,28,24,34],[52,29,24,35],[52,34,24,34],[52,35,24,20],[53,0,25,17],[53,13,23,16],[53,19,25,23],[53,26,25,30,"resolve"],[53,33,25,37],[53,34,25,38],[53,38,25,37],[53,39,25,23],[54,0,26,13],[54,11,21,12],[55,0,27,9],[55,9,20,15],[55,10,20,8],[56,0,28,5],[59,38,34,27,"callback"],[59,46],[59,48,34,37],[60,0,35,8,"GFit"],[60,38,35,13,"onAuthorize"],[60,49,35,8],[60,50,35,25,"callback"],[60,58,35,8],[61,0,36,5],[64,42,38,31,"callback"],[64,50],[64,52,38,41],[65,0,39,8,"GFit"],[65,38,39,13,"onAuthorizeFailure"],[65,56,39,8],[65,57,39,32,"callback"],[65,65,39,8],[66,0,40,5],[69,39,53,28,"options"],[69,46],[69,48,53,37],[70,0,54,8],[70,15,54,15],[70,19,54,19,"Promise"],[70,26,54,15],[70,27,54,27],[70,37,54,28,"res"],[70,40,54,27],[70,42,54,33,"rej"],[70,45,54,27],[70,47,54,41],[71,0,55,12,"GFit"],[71,40,55,17,"getDailyStepCountSamples"],[71,64,55,12],[71,65,55,42,"options"],[71,72,55,12],[71,74,55,51],[71,84,55,60,"err"],[71,87,55,51],[71,89,55,65,"result"],[71,95,55,51],[71,97,55,73],[72,0,56,16],[72,16,56,19,"err"],[72,19,56,16],[72,21,56,24],[72,28,56,31,"rej"],[72,31,56,34],[72,32,56,35],[72,36,56,39,"Error"],[72,41,56,35],[72,42,56,45],[72,91,56,35],[72,92,56,34],[72,93,56,24],[74,0,57,16],[74,16,57,19,"result"],[74,22,57,25],[74,23,57,26,"length"],[74,29,57,19],[74,33,57,36],[74,34,57,16],[74,36,57,39],[75,0,58,20],[75,21,58,27,"res"],[75,24,58,30],[75,25,58,31,"result"],[75,31,58,37],[75,32,58,38],[75,33,58,37],[75,34,58,31],[75,35,58,41,"steps"],[75,40,58,30],[75,41,58,20],[76,0,59,17],[76,13,57,16],[76,19,59,23],[76,23,59,26,"result"],[76,29,59,32],[76,30,59,33,"length"],[76,36,59,26],[76,40,59,43],[76,41,59,23],[76,43,59,46],[77,0,60,20],[77,21,60,27,"res"],[77,24,60,30],[77,25,60,31,"result"],[77,31,60,37],[77,32,60,38],[77,33,60,37],[77,34,60,31],[77,35,60,41,"steps"],[77,40,60,30],[77,41,60,20],[78,0,61,17],[79,0,62,13],[79,11,55,12],[80,0,63,9],[80,9,54,15],[80,10,54,8],[81,0,64,5],[84,42,72,31,"options"],[84,49],[84,51,72,40],[85,0,73,8],[85,15,73,15],[85,19,73,19,"Promise"],[85,26,73,15],[85,27,73,27],[85,37,73,28,"res"],[85,40,73,27],[85,42,73,33,"rej"],[85,45,73,27],[85,47,73,41],[86,0,74,12,"GFit"],[86,40,74,17,"getDailyCalorieSamples"],[86,62,74,12],[86,63,74,40,"options"],[86,70,74,12],[86,72,74,49],[86,82,74,58,"isErr"],[86,87,74,49],[86,89,74,65,"result"],[86,95,74,49],[86,97,74,73],[87,0,75,16],[87,16,75,19,"isErr"],[87,21,75,16],[87,23,75,26],[88,0,76,20],[88,21,76,27,"rej"],[88,24,76,30],[88,25,76,31],[88,29,76,35,"Error"],[88,34,76,31],[88,35,76,41],[88,81,76,31],[88,82,76,30],[88,83,76,20],[89,0,77,17],[91,0,78,16],[91,19,78,23,"res"],[91,22,78,26],[91,23,78,27,"result"],[91,29,78,26],[91,30,78,16],[92,0,79,13],[92,11,74,12],[93,0,80,9],[93,9,73,15],[93,10,73,8],[94,0,81,5],[97,42,89,31,"options"],[97,49],[97,51,89,40],[98,0,90,8],[98,15,90,15],[98,19,90,19,"Promise"],[98,26,90,15],[98,27,90,27],[98,37,90,28,"res"],[98,40,90,27],[98,42,90,33,"rej"],[98,45,90,27],[98,47,90,41],[99,0,91,12,"GFit"],[99,40,91,17,"getDailyDistanceSamples"],[99,63,91,12],[99,64,91,41,"options"],[99,71,91,12],[99,73,91,50],[99,83,91,59,"isErr"],[99,88,91,50],[99,90,91,66,"result"],[99,96,91,50],[99,98,91,74],[100,0,92,16,"console"],[100,12,92,16,"console"],[100,19,92,23],[100,20,92,24,"log"],[100,23,92,16],[100,24,92,28,"arguments"],[100,33,92,16],[100,35,92,39,"options"],[100,42,92,16],[101,0,93,16],[101,16,93,19,"isErr"],[101,21,93,24],[101,25,93,28],[101,72,93,16],[101,74,93,77],[101,81,93,84,"res"],[101,84,93,87],[101,85,93,88],[101,87,93,87],[101,88,93,77],[102,0,94,16],[102,16,94,19,"isErr"],[102,21,94,16],[102,23,94,26],[102,30,94,33,"rej"],[102,33,94,36],[102,34,94,37],[102,38,94,41,"Error"],[102,43,94,37],[102,44,94,47],[102,92,94,37],[102,93,94,36],[102,94,94,26],[103,0,95,16,"console"],[103,12,95,16,"console"],[103,19,95,23],[103,20,95,24,"log"],[103,23,95,16],[103,24,95,28,"result"],[103,30,95,16],[104,0,96,16],[104,19,96,23,"res"],[104,22,96,26],[104,23,96,27,"result"],[104,29,96,26],[104,30,96,16],[105,0,97,13],[105,11,91,12],[106,0,98,9],[106,9,90,15],[106,10,90,8],[107,0,99,5],[110,45,105,34,"callback"],[110,53],[110,55,105,44],[111,0,106,8,"Pedometer"],[111,47,106,18,"startPedometerUpdatesFromDate"],[111,76,106,8],[111,77,106,48,"Date"],[111,81,106,52],[111,82,106,53,"now"],[111,85,106,48],[111,87,106,8],[111,89,106,60,"callback"],[111,97,106,8],[112,0,107,5],[115,46,109,35],[116,0,110,8,"Pedometer"],[116,47,110,18,"stopPedometerUpdates"],[116,67,110,8],[117,0,111,5],[120,38,120,33,"startDate"],[120,47],[130,0,120,44,"sinceMidnight"],[130,16,120,44,"sinceMidnight"],[130,29],[130,88,120,60],[130,93],[131,0,120,67,"endDate"],[131,16,120,67,"endDate"],[131,23],[133,0,121,8],[133,20,121,11,"sinceMidnight"],[133,33,121,8],[133,35,121,26],[134,0,122,12,"startDate"],[134,18,122,12,"startDate"],[134,27,122,21],[134,28,122,22,"startOf"],[134,35,122,12],[134,36,122,30],[134,41,122,12],[135,0,123,9],[137,0,124,14,"options"],[137,16,124,14,"options"],[137,23],[137,26,124,24],[138,0,125,12,"startDate"],[138,18,125,12,"startDate"],[138,27,125,21],[138,29,125,23,"startDate"],[138,38,125,32],[138,39,125,33,"toISOString"],[138,50,125,23],[138,52,124,24],[139,0,126,12,"endDate"],[139,18,126,12,"endDate"],[139,25,126,19],[139,27,126,21,"endDate"],[139,34,126,28],[139,37,126,31,"endDate"],[139,44,126,38],[139,45,126,39,"toISOString"],[139,56,126,31],[139,58,126,28],[139,61,126,55],[139,84,126,64,"toISOString"],[139,95,126,55],[140,0,124,24],[140,17],[143,50,130,31,"Promise"],[143,57,130,38],[143,58,130,39,"all"],[143,61,130,31],[143,62,130,43],[143,63,131,16,"GoogleFit"],[143,72,131,25],[143,73,131,26,"getStepsFromDate"],[143,89,131,16],[143,90,131,43,"options"],[143,97,131,16],[143,98,130,43],[143,100,132,16,"GoogleFit"],[143,109,132,25],[143,110,132,26,"getDistanceFromDate"],[143,129,132,16],[143,130,132,46,"options"],[143,137,132,16],[143,138,130,43],[143,140,133,16,"GoogleFit"],[143,149,133,25],[143,150,133,26,"getCaloriesFromDate"],[143,169,133,16],[143,170,133,46,"options"],[143,177,133,16],[143,178,130,43],[143,179,130,31],[143,180],[146,0,130,18,"data"],[146,16,130,18,"data"],[146,20],[147,0,134,15],[148,49,136,19],[149,0,137,16,"steps"],[149,18,137,16,"steps"],[149,23,137,21],[149,25,137,23,"data"],[149,29,137,27],[149,30,137,28],[149,31,137,27],[149,32,137,23],[149,33,137,31,"length"],[149,39,137,23],[149,42,137,40],[149,43,137,23],[149,46,137,44,"data"],[149,50,137,48],[149,51,137,49],[149,52,137,48],[149,53,137,44],[149,54,137,52],[149,55,137,44],[149,57,137,55,"value"],[149,62,137,23],[149,65,137,63],[149,66,136,19],[150,0,138,16,"distance"],[150,18,138,16,"distance"],[150,26,138,24],[150,28,138,26,"data"],[150,32,138,30],[150,33,138,31],[150,34,138,30],[150,35,138,26],[150,36,138,34,"length"],[150,42,138,26],[150,45,138,43],[150,46,138,26],[150,49,138,47,"data"],[150,53,138,51],[150,54,138,52],[150,55,138,51],[150,56,138,47],[150,57,138,55],[150,58,138,47],[150,60,138,58,"distance"],[150,68,138,26],[150,71,138,69],[150,72,136,19],[151,0,139,16,"calories"],[151,18,139,16,"calories"],[151,26,139,24],[151,28,139,26,"data"],[151,32,139,30],[151,33,139,31],[151,34,139,30],[151,35,139,26],[151,36,139,34,"length"],[151,42,139,26],[151,45,139,43],[151,46,139,26],[151,49,139,47,"data"],[151,53,139,51],[151,54,139,52],[151,55,139,51],[151,56,139,47],[151,57,139,55],[151,58,139,47],[151,60,139,58,"calorie"],[151,67,139,26],[151,70,139,68],[152,0,136,19],[152,17],[157,0,142,12,"console"],[157,16,142,12,"console"],[157,23,142,19],[157,24,142,20,"log"],[157,27,142,12],[158,22,143,18],[158,26,143,22,"Error"],[158,31,143,18],[158,32,143,28],[158,67,143,18],[158,68],[176,0,148,14,"state"],[176,16,148,14,"state"],[176,21],[176,24,148,22,"store"],[176,43,148,28,"getState"],[176,51,148,22],[176,53],[177,0,149,14,"createdAt"],[177,16,149,14,"createdAt"],[177,25],[177,28,149,26,"DateUtil"],[177,46,149,35,"unixToMoment"],[177,58,149,26],[177,59,149,48,"state"],[177,64,149,53],[177,65,149,54,"user"],[177,69,149,48],[177,70,149,59,"createdAt"],[177,79,149,26],[177,80],[178,0,151,14,"startDate"],[178,16,151,14,"startDate"],[178,25],[178,28,151,26,"createdAt"],[178,37,151,35],[178,38,151,36,"isSame"],[178,44,151,26],[178,45,151,43],[178,67,151,26],[178,69,151,53],[178,75,151,26],[178,79,151,63,"createdAt"],[178,88,151,26],[178,91,151,75],[178,114,151,84,"startOf"],[178,121,151,75],[178,122,151,92],[178,127,151,75],[178,128],[181,50,154,56,"GoogleFit"],[181,59,154,65],[181,60,154,66,"fetchDataSingle"],[181,75,154,56],[181,76,154,82,"startDate"],[181,85,154,56],[181,87,154,93],[181,92,154,56],[181,93],[185,0,154,20,"steps"],[185,16,154,20,"steps"],[185,21],[185,29,154,20,"steps"],[185,34],[186,0,154,27,"distance"],[186,16,154,27,"distance"],[186,24],[186,32,154,27,"distance"],[186,40],[187,0,154,37,"calories"],[187,16,154,37,"calories"],[187,24],[187,32,154,37,"calories"],[187,40],[189,0,156,12,"store"],[189,35,156,18,"dispatch"],[189,43,156,12],[189,44,156,27],[189,74,156,35,"steps"],[189,79,156,27],[189,81,156,42,"distance"],[189,89,156,27],[189,91,156,52,"calories"],[189,99,156,27],[189,100,156,12],[198,0,159,12,"Alert"],[198,35,159,18,"alert"],[198,40,159,12],[198,41,159,24],[198,49,159,12],[198,51,159,34],[198,108,159,12],[211,17,166,15,"GoogleFit"],[211,26]]},"type":"js/module"}]}